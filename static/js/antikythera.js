// Generated by CoffeeScript 1.6.3
(function() {
  var HEIGHT, WIDTH, drawAstronomical, drawClock, svg;

  WIDTH = 288;

  HEIGHT = 336;

  svg = d3.select('#canvas').append('svg:svg').attr('width', WIDTH).attr('height', HEIGHT);

  drawAstronomical = function() {
    var astroGroup, background, centerPosition, jupiterRadius, jupiterSize, marsRadius, marsSize, sunWidth, venusRadius, venusSize;
    d3.selectAll('svg > *').remove();
    background = svg.append('rect').attr('dx', '0').attr('dy', '0').attr('width', WIDTH).attr('height', HEIGHT).attr('fill', 'white').attr('stroke', '#888').attr('stroke-width', '2px');
    centerPosition = {
      x: WIDTH / 2,
      y: HEIGHT / 2
    };
    venusRadius = WIDTH * 0.3;
    marsRadius = WIDTH * 0.35;
    jupiterRadius = WIDTH * 0.4;
    venusSize = 20;
    marsSize = 20;
    jupiterSize = 20;
    sunWidth = 18;
    astroGroup = svg.append('g').attr('class', 'astronomical');
    $.ajax({
      url: '/horizon',
      data: {
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var sunrise, sunset;
      sunrise = data.rise_angle - (7 / 12 * Math.PI);
      sunset = data.set_angle - (7 / 12 * Math.PI);
      return astroGroup.append('path').attr('id', 'horizon').attr('d', "M" + (centerPosition.x + HEIGHT * -Math.sin(sunrise)) + "," + (centerPosition.y + HEIGHT * -1 * Math.cos(sunrise)) + " L" + centerPosition.x + "," + centerPosition.y + " L" + (centerPosition.x + HEIGHT * -Math.sin(sunset)) + "," + (centerPosition.y + HEIGHT * -Math.cos(sunset)) + " L" + WIDTH + "," + HEIGHT + " L0," + HEIGHT).attr('stroke', 'black').attr('stroke-width', '4px');
    });
    $.ajax({
      url: '/angle',
      data: {
        body: 'sun',
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var sunPosition;
      sunPosition = data.angle;
      return astroGroup.append('path').attr('id', 'sunbeam').attr('d', "M" + centerPosition.x + "," + centerPosition.y + " L" + (centerPosition.x + HEIGHT * -Math.cos(sunPosition - (sunWidth / 2) * Math.PI / 360.0)) + "," + (centerPosition.y + HEIGHT * -Math.sin(sunPosition - (sunWidth / 2) * Math.PI / 360.0)) + " L" + (centerPosition.x + HEIGHT * -Math.cos(sunPosition + (sunWidth / 2) * Math.PI / 360.0)) + "," + (centerPosition.y + HEIGHT * -Math.sin(sunPosition + (sunWidth / 2) * Math.PI / 360.0)) + " L" + centerPosition.x + "," + centerPosition.y + " Z").attr('stroke', 'black').attr('stroke-width', '2px').attr('fill', 'white');
    });
    $.ajax({
      url: '/angle',
      data: {
        body: 'moon',
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var moonPosition;
      moonPosition = data.angle;
      return astroGroup.append('path').attr('id', 'moonbeam').attr('d', "M" + centerPosition.x + "," + centerPosition.y + " L" + (centerPosition.x + HEIGHT * -Math.cos(moonPosition - (sunWidth / 2) * Math.PI / 360.0)) + "," + (centerPosition.y + HEIGHT * -Math.sin(moonPosition - (sunWidth / 2) * Math.PI / 360.0)) + " L" + (centerPosition.x + HEIGHT * -Math.cos(moonPosition + (sunWidth / 2) * Math.PI / 360.0)) + "," + (centerPosition.y + HEIGHT * -Math.sin(moonPosition + (sunWidth / 2) * Math.PI / 360.0)) + " L" + centerPosition.x + "," + centerPosition.y + " Z").attr('stroke', 'white').attr('stroke-width', '2px').attr('fill', 'black');
    });
    $.ajax({
      url: '/angle',
      data: {
        body: 'venus',
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var venusPosition;
      venusPosition = data.angle;
      return astroGroup.append('path').attr('id', 'venus').attr('d', "M" + (centerPosition.x + venusRadius * -Math.cos(venusPosition) - venusSize / 2) + "," + (centerPosition.y + venusRadius * -Math.sin(venusPosition) - venusSize / 2) + " l" + venusSize + ",0 l-" + (venusSize / 2) + "," + venusSize + " z").attr('stroke', 'black').attr('stroke-width', '2px').attr('fill', 'white');
    });
    $.ajax({
      url: '/angle',
      data: {
        body: 'mars',
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var marsPosition;
      marsPosition = data.angle;
      return astroGroup.append('path').attr('id', 'mars').attr('d', "M" + (centerPosition.x + marsRadius * -Math.cos(marsPosition) - marsSize / 2) + "," + (centerPosition.y + marsRadius * -Math.sin(marsPosition) + marsSize / 2) + " l" + marsSize + ",0 l-" + (marsSize / 2) + ",-" + marsSize + " z").attr('stroke', 'black').attr('stroke-width', '2px').attr('fill', 'white');
    });
    $.ajax({
      url: '/angle',
      data: {
        body: 'jupiter',
        lat: '37:52:18',
        lon: '-122:16:18'
      },
      cached: false
    }).done(function(data) {
      var jupiterPosition;
      jupiterPosition = data.angle;
      return astroGroup.append('rect').attr('id', 'jupiter').attr('x', centerPosition.x + jupiterRadius * -Math.cos(jupiterPosition)).attr('y', centerPosition.y + jupiterRadius * -Math.sin(jupiterPosition)).attr('width', jupiterSize).attr('height', jupiterSize).attr('stroke', 'black').attr('stroke-width', '2px').attr('fill', 'white');
    });
    return drawClock();
  };

  drawClock = function() {
    var centerPosition, currentTime, hourAngle, hourRadius, hourSweep, minuteAngle, minuteRadius, minuteSweep, secondGroup, secondMarker, secondMarkers, secondRadius, timeGroup, _i, _j, _ref, _results, _results1;
    centerPosition = {
      x: WIDTH / 2,
      y: HEIGHT / 2
    };
    d3.selectAll('g.time > *').remove();
    timeGroup = svg.append('g').attr('class', 'time');
    currentTime = new Date;
    hourAngle = (currentTime.getHours() % 12) / 6 * Math.PI;
    if (hourAngle === 0) {
      hourAngle = 2 * Math.PI - 0.000001;
    }
    if (hourAngle < Math.PI) {
      hourSweep = 0;
    } else {
      hourSweep = 1;
    }
    hourRadius = 10;
    minuteAngle = (currentTime.getMinutes()) / 30 * Math.PI;
    if (minuteAngle === 0) {
      minuteAngle = 2 * Math.PI - 0.00001;
    }
    if (minuteAngle < Math.PI) {
      minuteSweep = 0;
    } else {
      minuteSweep = 1;
    }
    minuteRadius = 20;
    secondMarkers = Math.floor(currentTime.getSeconds() / 2);
    secondRadius = 30;
    timeGroup.append('circle').attr('id', 'background-clock').attr('cx', centerPosition.x).attr('cy', centerPosition.y).attr('r', secondRadius + 5).attr('stroke', 'none').attr('fill', 'white');
    timeGroup.append('path').attr('id', 'hour-arc').attr('d', "M" + centerPosition.x + "," + (centerPosition.y - hourRadius) + " A" + hourRadius + "," + hourRadius + " 0 " + hourSweep + ",1 " + (centerPosition.x + hourRadius * Math.sin(hourAngle)) + "," + (centerPosition.y - hourRadius * Math.cos(hourAngle))).attr('stroke', 'black').attr('stroke-width', '4px').attr('fill', 'none');
    timeGroup.append('path').attr('id', 'minute-arc').attr('d', "M" + centerPosition.x + "," + (centerPosition.y - minuteRadius) + " A" + minuteRadius + "," + minuteRadius + " 0 " + minuteSweep + ",1 " + (centerPosition.x + minuteRadius * Math.sin(minuteAngle)) + "," + (centerPosition.y - minuteRadius * Math.cos(minuteAngle))).attr('stroke', 'black').attr('stroke-width', '4px').attr('fill', 'none');
    secondGroup = timeGroup.append('g').attr('class', 'second-group');
    if (secondMarkers % 30 !== 0) {
      if (secondMarkers <= 15) {
        _results = [];
        for (secondMarker = _i = 1; 1 <= secondMarkers ? _i <= secondMarkers : _i >= secondMarkers; secondMarker = 1 <= secondMarkers ? ++_i : --_i) {
          _results.push((function(secondMarker) {
            var blip;
            blip = secondMarker * 4;
            return secondGroup.append('circle').attr('cx', centerPosition.x + secondRadius * Math.sin(blip / 30 * Math.PI)).attr('cy', centerPosition.y - secondRadius * Math.cos(blip / 30 * Math.PI)).attr('fill', 'black').attr('stroke', 'none').attr('r', '4px');
          })(secondMarker));
        }
        return _results;
      } else {
        _results1 = [];
        for (secondMarker = _j = _ref = secondMarkers % 15 + 1; _ref <= 15 ? _j <= 15 : _j >= 15; secondMarker = _ref <= 15 ? ++_j : --_j) {
          _results1.push((function(secondMarker) {
            var blip;
            blip = secondMarker * 4;
            return secondGroup.append('circle').attr('cx', centerPosition.x + secondRadius * Math.sin(blip / 30 * Math.PI)).attr('cy', centerPosition.y - secondRadius * Math.cos(blip / 30 * Math.PI)).attr('fill', 'black').attr('stroke', 'none').attr('r', '4px');
          })(secondMarker));
        }
        return _results1;
      }
    }
  };

  drawAstronomical();

  setInterval(drawClock, 500);

  setInterval(drawAstronomical, 300000);

}).call(this);
